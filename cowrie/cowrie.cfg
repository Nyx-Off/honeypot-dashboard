[ssh]
# Ports sur lesquels Cowrie écoute à l’intérieur du container
# (tu as mappé 2222 → 2222 dans docker-compose)
listen_port = 2222
listen_endpoints = tcp:2222:interface=0.0.0.0

# Clés SSH que Cowrie présentera aux attaquants
host_key = /home/cowrie/keys/ssh_host_rsa_key

# Génère-les avec: ssh-keygen -t rsa -f ssh_host_rsa_key ...

[telnet]
# Même principe si tu veux le Telnet
enabled = true
listen_port = 2223
listen_endpoints = tcp:2223:interface=0.0.0.0

[honeypot]
# Définition des utilisateurs factices
# Mot de passe en clair (mais l’attaquant voit un hash sur /etc/shadow)
fake_users = user1,user2,admin
# Taux de réponse (simule une machine lente)
read_delay = 0.2
write_delay = 0.2

[output_jsonlog]
# Active la sortie JSON (pour ingestion)
enabled = true
logfile = /cowrie/cowrie-git/var/log/cowrie.json
epoch_timestamp = false

[output_stdout]
# Affiche aussi les événements dans stdout (utile pour debug)
enabled = true

[database_mongodb]
# On n’utilise pas la DB interne, on se limite au JSON + MongoDB externe
enabled = false

[filesystem]
# Monte un répertoire partagé pour simuler /home et co
# (dans Docker, monte le dossier host ./cowrie/log)
root_dir = /home/cowrie/data/rootfs

[session]
# Timeout d’inactivité (en secondes)
timeout = 600

[logging]
# Niveau de verbosité
loglevel = INFO
# Fichier de log classique (en plus du JSON dump)
logfile = log/cowrie.log

[proxy]
# Si tu as un reverse proxy devant, configure ici
# use_proxy_protocol = false

[auth]
# Autorise la tentative de login par mot de passe
enable_password_auth = true
# Intercepte toute connexion par clé publique pour la journaliser
honour_auth_keys = false

[interactions]
# Répertoire des scripts de “fake commands”
interactive = true

[system]
# Masquer la vraie version du noyau
os_version = "Ubuntu 18.04.5 LTS"

[profile]
# Bannières personnalisées
ssh_banner = Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-112-generic x86_64)\n

[commands]
# Bloque certaines commandes ou répond de façon factice
blocked_commands = su,sudo,passwd

